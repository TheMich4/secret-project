{"version":3,"sources":["assets/RankEmblems/Emblem_Bronze.png","assets/RankEmblems/Emblem_Challenger.png","assets/RankEmblems/Emblem_Diamond.png","assets/RankEmblems/Emblem_Gold.png","assets/RankEmblems/Emblem_Grandmaster.png","assets/RankEmblems/Emblem_Iron.png","assets/RankEmblems/Emblem_Master.png","assets/RankEmblems/Emblem_Platinum.png","assets/RankEmblems/Emblem_Silver.png","logo.svg","serviceWorker.js","displays/MainScreen/index.jsx","displays/NavBar/index.jsx","common/Card/index.jsx","displays/UserProfile/ProfileIcon.jsx","displays/UserProfile/Rank.jsx","displays/UserProfile/index.jsx","reducers/index.js","App.js","store.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","MainScreen","className","NavBar","logo","Navbar","variant","Brand","alt","height","src","width","Card","children","ProfileIcon","id","size","profileIcon","RankInfo","rankIcon","rank","challenger","grandmaster","master","diamond","platinum","gold","silver","bronze","iron","getRankIcon","UserProfile","profileIconId","name","summonerLevel","Rank","initialState","rootReducer","state","action","type","store","createStore","applyMiddleware","thunk","App","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2IAAAA,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,+C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,gD,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,kBCA3CD,EAAOC,QAAU,IAA0B,kC,kLCevBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2D,sCCLpBC,EARI,WACjB,OACE,yBAAKC,UAAU,cACb,kBAAC,EAAD,Q,gBCYSC,EAXA,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,KAChB,OACE,kBAACC,EAAA,EAAD,CAAQH,UAAU,SAASI,QAAQ,QACjC,kBAACD,EAAA,EAAOE,MAAR,KACE,yBAAKC,IAAI,GAAGN,UAAU,2BAA2BO,OAAO,KAAKC,IAAKN,EAAMO,MAAM,OADhF,oBCFSC,G,WAFF,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAAyB,yBAAKX,UAAU,QAAQW,KCO9CC,EANK,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KACnBC,EAAW,wEAAoEF,EAApE,QAEjB,OAAO,yBAAKb,UAAU,mBAAmBO,OAAQO,EAAMN,IAAKO,EAAaN,MAAOK,K,yJCwCnEE,EAVE,SAAC,GAA2B,IAAzBF,EAAwB,EAAxBA,KACZG,EAxBY,SAACC,GACnB,OAAQA,GACN,IAAK,aACH,OAAOC,IACT,IAAK,cACH,OAAOC,IACT,IAAK,SACH,OAAOC,IACT,IAAK,UACH,OAAOC,IACT,IAAK,WACH,OAAOC,IACT,IAAK,OACH,OAAOC,IACT,IAAK,SACH,OAAOC,IACT,IAAK,SACH,OAAOC,IACT,QACE,OAAOC,KAKMC,CADyB,EAAlBV,MAGxB,OACE,yBAAKlB,UAAU,oBACb,yBAAKO,OAAQO,EAAMN,IAAKS,EAAUR,MAAOK,MCThCe,EAzBK,SAAC,GAIP,IAAD,IAHXC,qBAGW,MAHK,OAGL,MAFXC,YAEW,MAFJ,kBAEI,MADXC,qBACW,MADK,MACL,EACX,OACE,yBAAKhC,UAAU,eACb,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAaa,GAAIiB,EAAehB,KAAK,OAErC,yBAAKd,UAAU,uBACb,yBAAKA,UAAU,oBAAoB+B,GACnC,yBAAK/B,UAAU,qBAAf,iBAA8CgC,KAGhD,yBAAKhC,UAAU,qBACb,kBAACiC,EAAD,CAAUf,KAAK,aAAaJ,KAAK,OACjC,kBAACmB,EAAD,CAAUnB,KAAK,OACf,kBAACmB,EAAD,CAAUf,KAAK,OAAOJ,KAAK,W,eC/B/BoB,EAAe,GASNC,MAPf,WAAoD,IAA/BC,EAA8B,uDAAtBF,EAAcG,EAAQ,uCAG7C,OAFIA,EAAOC,KAEJF,G,6BCKPG,ECJGC,YAAYL,EAAaM,YAAgBC,MDiBnCC,EAXH,WACV,OACE,kBAAC,IAAD,CAAUJ,MAAOA,GACf,yBAAKvC,UAAU,OACb,kBAAC,EAAD,CAAQE,KAAMA,MACd,kBAAC,EAAD,S,cETR0C,EAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SVoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e453a243.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Emblem_Bronze.39964f7f.png\";","module.exports = __webpack_public_path__ + \"static/media/Emblem_Challenger.4aaf9754.png\";","module.exports = __webpack_public_path__ + \"static/media/Emblem_Diamond.c9018327.png\";","module.exports = __webpack_public_path__ + \"static/media/Emblem_Gold.19be519b.png\";","module.exports = __webpack_public_path__ + \"static/media/Emblem_Grandmaster.d0d4b62f.png\";","module.exports = __webpack_public_path__ + \"static/media/Emblem_Iron.1a6b4669.png\";","module.exports = __webpack_public_path__ + \"static/media/Emblem_Master.4156f1c1.png\";","module.exports = __webpack_public_path__ + \"static/media/Emblem_Platinum.86ac5170.png\";","module.exports = __webpack_public_path__ + \"static/media/Emblem_Silver.3a4aa1a5.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.4352bc3d.svg\";","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\\\n\n// @flow\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// @flow\n\nimport './style.css';\n\nimport React from 'react';\nimport { UserProfile } from '../../displays';\n\nconst MainScreen = () => {\n  return (\n    <div className=\"MainScreen\">\n      <UserProfile />\n    </div>\n  );\n};\n\nexport default MainScreen;\n","// @flow\n\nimport './style.css';\n\nimport { Navbar } from 'react-bootstrap';\nimport React from 'react';\n\ntype Props = {\n  logo: string,\n};\n\nconst NavBar = ({ logo }: Props) => {\n  return (\n    <Navbar className=\"NavBar\" variant=\"dark\">\n      <Navbar.Brand>\n        <img alt=\"\" className=\"d-inline-block align-top\" height=\"30\" src={logo} width=\"30\" />\n        SECRET-PROJECT\n      </Navbar.Brand>\n    </Navbar>\n  );\n};\n\nexport default NavBar;\n","// @flow\n\nimport './style.css';\n\nimport React from 'react';\n\ntype Props = {\n  children: any,\n};\n\nconst Card = ({ children }: Props) => <div className=\"Card\">{children}</div>;\n\nexport default Card;\n","// @flow\n\nimport './style.css';\n\nimport React from 'react';\n\ntype Props = {\n  id: string,\n  size: string,\n};\n\nconst ProfileIcon = ({ id, size }: Props) => {\n  const profileIcon = `http://ddragon.leagueoflegends.com/cdn/10.6.1/img/profileicon/${id}.png`;\n\n  return <img className=\"UserProfile-Icon\" height={size} src={profileIcon} width={size} />;\n};\n\nexport default ProfileIcon;\n","// @flow\n\nimport './style.css';\n\nimport type { Rank } from './types';\nimport React from 'react';\nimport bronze from '../../assets/RankEmblems/Emblem_Bronze.png';\nimport challenger from '../../assets/RankEmblems/Emblem_Challenger.png';\nimport diamond from '../../assets/RankEmblems/Emblem_Diamond.png';\nimport gold from '../../assets/RankEmblems/Emblem_Gold.png';\nimport grandmaster from '../../assets/RankEmblems/Emblem_Grandmaster.png';\nimport iron from '../../assets/RankEmblems/Emblem_Iron.png';\nimport master from '../../assets/RankEmblems/Emblem_Master.png';\nimport platinum from '../../assets/RankEmblems/Emblem_Platinum.png';\nimport silver from '../../assets/RankEmblems/Emblem_Silver.png';\n\ntype Props = {\n  size: string,\n  rank: Rank,\n};\n\nconst getRankIcon = (rank: string) => {\n  switch (rank) {\n    case 'challenger':\n      return challenger;\n    case 'grandmaster':\n      return grandmaster;\n    case 'master':\n      return master;\n    case 'diamond':\n      return diamond;\n    case 'platinum':\n      return platinum;\n    case 'gold':\n      return gold;\n    case 'silver':\n      return silver;\n    case 'bronze':\n      return bronze;\n    default:\n      return iron;\n  }\n};\n\nconst RankInfo = ({ size, rank }: Props) => {\n  const rankIcon = getRankIcon(rank);\n\n  return (\n    <div className=\"UserProfile-Rank\">\n      <img height={size} src={rankIcon} width={size}></img>\n    </div>\n  );\n};\n\nexport default RankInfo;\n","// @flow\n\nimport './style.css';\n\nimport { Card } from '../../common';\nimport ProfileIcon from './ProfileIcon';\nimport RankInfo from './Rank';\nimport React from 'react';\n\ntype Props = {\n  profileIconId: ?string,\n  name: ?string,\n  summonerLevel: ?string,\n};\n\nconst UserProfile = ({\n  profileIconId = '4405',\n  name = 'kocham wojtusia',\n  summonerLevel = '250',\n}: Props) => {\n  return (\n    <div className=\"UserProfile\">\n      <Card>\n        <ProfileIcon id={profileIconId} size=\"80\" />\n\n        <div className=\"UserProfile-Details\">\n          <div className=\"UserProfile-Name\">{name}</div>\n          <div className=\"UserProfile-Level\">{`Level: ${summonerLevel}`}</div>\n        </div>\n\n        <div className=\"UserProfile-Ranks\">\n          <RankInfo rank=\"challenger\" size=\"80\" />\n          <RankInfo size=\"80\" />\n          <RankInfo rank=\"gold\" size=\"80\" />\n        </div>\n      </Card>\n    </div>\n  );\n};\n\nexport default UserProfile;\n","// @flow\n\nconst initialState = {};\n\nfunction rootReducer(state = initialState, action) {\n  switch (action.type) {\n    default:\n      return state;\n  }\n}\n\nexport default rootReducer;\n","// @flow\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { MainScreen, NavBar } from './displays';\n\nimport { Provider } from 'react-redux';\nimport React from 'react';\nimport configureStore from './store';\nimport logo from './logo.svg';\n\nconst store = configureStore();\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <NavBar logo={logo} />\n        <MainScreen />\n      </div>\n    </Provider>\n  );\n};\n\nexport default App;\n","// @flow\n\nimport { applyMiddleware, createStore } from 'redux';\n\nimport rootReducer from './reducers';\nimport thunk from 'redux-thunk';\n\nexport default function configureStore() {\n  return createStore(rootReducer, applyMiddleware(thunk));\n}\n","// @flow\n\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}