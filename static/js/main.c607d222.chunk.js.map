{"version":3,"sources":["assets/RankEmblems/Emblem_Bronze.png","assets/RankEmblems/Emblem_Challenger.png","assets/RankEmblems/Emblem_Diamond.png","assets/RankEmblems/Emblem_Gold.png","assets/RankEmblems/Emblem_Grandmaster.png","assets/RankEmblems/Emblem_Iron.png","assets/RankEmblems/Emblem_Master.png","assets/RankEmblems/Emblem_Platinum.png","assets/RankEmblems/Emblem_Silver.png","logo.svg","serviceWorker.js","common/Button/index.jsx","common/Card/index.jsx","common/ChampionIcon/index.jsx","common/ItemIcon/index.jsx","common/SummonerSpellIcon/index.jsx","displays/LiveGame/index.jsx","actions/index.js","actions/actionTypes.js","displays/MainScreen/useWindowDimensions.js","displays/MainScreen/index.jsx","displays/NavBar/index.jsx","displays/UserProfile/Game/ChampionsList/index.jsx","displays/UserProfile/Game/ItemsList/index.jsx","displays/UserProfile/Game/index.jsx","displays/UserProfile/GameHistory/index.jsx","displays/UserProfile/OptionsBar/index.jsx","displays/UserProfile/ProfileIcon.jsx","displays/UserProfile/RankInfo.jsx","displays/UserProfile/index.jsx","reducers/index.js","store.js","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Button","onClick","label","className","Card","children","ChampionIcon","size","champion","championIcon","alt","classnames","height","src","width","ItemIcon","itemId","itemIcon","SummonerSpellIcon","spell","icon","connect","dispatch","hideLiveGame","type","getWindowDimensions","innerWidth","innerHeight","MainScreen","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","NavBar","logo","Navbar","variant","Brand","teams","ChampionsList","usersChampion","renderTeam","team","map","renderChampion","renderTeams","items1","items2","ItemsList","renderItemRow","items","renderItemIcon","Game","isWin","GameHistory","showLiveGame","ProfileIcon","id","profileIcon","RankInfo","rankIcon","rank","challenger","grandmaster","master","diamond","platinum","gold","silver","bronze","iron","getRankIcon","state","isLiveGameVisible","profileIconId","name","summonerLevel","initialState","rootReducer","action","middleware","thunk","createLogger","store","createStore","applyMiddleware","App","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c607d222.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Emblem_Bronze.39964f7f.png\";","module.exports = __webpack_public_path__ + \"static/media/Emblem_Challenger.4aaf9754.png\";","module.exports = __webpack_public_path__ + \"static/media/Emblem_Diamond.c9018327.png\";","module.exports = __webpack_public_path__ + \"static/media/Emblem_Gold.19be519b.png\";","module.exports = __webpack_public_path__ + \"static/media/Emblem_Grandmaster.d0d4b62f.png\";","module.exports = __webpack_public_path__ + \"static/media/Emblem_Iron.1a6b4669.png\";","module.exports = __webpack_public_path__ + \"static/media/Emblem_Master.4156f1c1.png\";","module.exports = __webpack_public_path__ + \"static/media/Emblem_Platinum.86ac5170.png\";","module.exports = __webpack_public_path__ + \"static/media/Emblem_Silver.3a4aa1a5.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.4352bc3d.svg\";","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\\\n\n// @flow\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// @flow\n\nimport './style.css';\n\nimport React from 'react';\n\ntype Props = {\n  label: string,\n  onClick: Function,\n};\n\nconst Button = ({ onClick, label }: Props) => (\n  <div className=\"Button\" onClick={onClick}>\n    {label}\n  </div>\n);\n\nexport default Button;\n","// @flow\n\nimport './style.css';\n\nimport React from 'react';\n\ntype Props = {\n  children: any,\n};\n\nconst Card = ({ children }: Props) => <div className=\"Card\">{children}</div>;\n\nexport default Card;\n","// @flow\n\nimport './style.css';\n\nimport React from 'react';\nimport classnames from 'classnames';\n\ntype Props = {\n  size: string,\n  champion: string,\n  className?: string,\n};\n\nconst ChampionIcon = ({ size, champion, className }: Props) => {\n  const championIcon = `http://ddragon.leagueoflegends.com/cdn/10.6.1/img/champion/${champion}.png`;\n\n  return (\n    <img\n      alt=\"\"\n      className={classnames('ChampionIcon', className)}\n      height={size}\n      src={championIcon}\n      width={size}\n    />\n  );\n};\n\nexport default ChampionIcon;\n","// @flow\n\nimport './style.css';\n\nimport React from 'react';\nimport classnames from 'classnames';\n\ntype Props = {\n  size: string,\n  itemId: string,\n  className?: string,\n};\n\nconst ItemIcon = ({ size, itemId, className }: Props) => {\n  const itemIcon = `http://ddragon.leagueoflegends.com/cdn/10.6.1/img/item/${itemId}.png`;\n\n  return (\n    <img\n      alt=\"\"\n      className={classnames('ItemIcon', className)}\n      height={size}\n      src={itemIcon}\n      width={size}\n    />\n  );\n};\n\nexport default ItemIcon;\n","// @flow\n\nimport React from 'react';\n\nconst src = 'http://ddragon.leagueoflegends.com/cdn/10.6.1/img/spell/SummonerHeal.png';\n\ntype Props = {\n  size: string,\n  spell: string,\n};\n\nconst SummonerSpellIcon = ({ size, spell }: Props) => {\n  const icon = `http://ddragon.leagueoflegends.com/cdn/10.6.1/img/spell/Summoner${spell}.png`;\n\n  return (\n    <div className=\"SummonnerSpellIcon\">\n      <img alt=\"\" height={size} src={icon} width={size} />\n    </div>\n  );\n};\n\nexport default SummonerSpellIcon;\n","// @flow\n\nimport './style.css';\n\nimport { Button, Card } from '../../common';\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { hideLiveGame } from '../../actions';\n\ntype Props = {\n  hideLiveGame: () => void,\n};\n\nconst LiveGame = ({ hideLiveGame }: Props) => (\n  <Card>\n    <div className=\"LiveGame-TopBar\">\n      <div className=\"LiveGame-Info\">Live Game - Ranked (solo/duo) - Xayah - 15:22</div>\n      <Button label=\"x\" onClick={hideLiveGame} />\n    </div>\n  </Card>\n);\n\nconst mapDispatchToProps = dispatch => ({\n  hideLiveGame: () => dispatch(hideLiveGame()),\n});\n\nexport default connect(null, mapDispatchToProps)(LiveGame);\n","// @flow\n\nimport { HIDE_LIVE_GAME, SHOW_LIVE_GAME } from './actionTypes';\n\nexport const showLiveGame = () => {\n  return function action(dispatch) {\n    dispatch({ type: SHOW_LIVE_GAME });\n  };\n};\n\nexport const hideLiveGame = () => {\n  return function action(dispatch) {\n    dispatch({ type: HIDE_LIVE_GAME });\n  };\n};\n","// @flow\n\nexport const SHOW_LIVE_GAME = 'SHOW_LIVE_GAME';\nexport const HIDE_LIVE_GAME = 'HIDE_LIVE_GAME';\n","// @flow\n\nimport { useEffect, useState } from 'react';\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height,\n  };\n}\n\nexport default function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowDimensions;\n}\n","// @flow\n\nimport './style.css';\n\nimport React from 'react';\nimport { UserProfile } from '../../displays';\nimport useWindowDimensions from './useWindowDimensions';\n\nconst MainScreen = () => {\n  const { width } = useWindowDimensions();\n\n  if (width < 500) {\n    return <div>Mobile screens not yet supported!</div>;\n  }\n\n  return (\n    <div className=\"MainScreen\">\n      <UserProfile />\n    </div>\n  );\n};\n\nexport default MainScreen;\n","// @flow\n\nimport './style.css';\n\nimport { Navbar } from 'react-bootstrap';\nimport React from 'react';\n\ntype Props = {\n  logo: string,\n};\n\nconst NavBar = ({ logo }: Props) => {\n  return (\n    <Navbar className=\"NavBar\" variant=\"dark\">\n      <Navbar.Brand>\n        <img alt=\"\" className=\"d-inline-block align-top\" height=\"30\" src={logo} width=\"30\" />\n        SECRET-PROJECT\n      </Navbar.Brand>\n    </Navbar>\n  );\n};\n\nexport default NavBar;\n","// @flow\n\nimport '../style.css';\n\nimport { ChampionIcon } from '../../../../common';\nimport React from 'react';\nimport classnames from 'classnames';\n\ntype Props = {\n  usersChampion: string,\n};\n\nconst teams = [\n  ['Ornn', 'Gragas', 'Cassiopeia', 'Ezreal', 'Sett'],\n  ['Vladimir', 'LeeSin', 'Viktor', 'Xayah', 'Rakan'],\n];\n\nconst ChampionsList = ({ usersChampion }: Props) => {\n  const renderTeams = (teams: Array<Array<string>>) => teams.map(team => renderTeam(team));\n\n  const renderTeam = (team: Array<string>) => (\n    <div className=\"ChampionsList-Team\">{team.map(champion => renderChampion(champion))}</div>\n  );\n\n  const renderChampion = (champion: string) => (\n    <ChampionIcon\n      champion={champion}\n      className={classnames(\n        'ChampionList-Champion',\n        usersChampion === champion && 'ChampionList-Champion--current',\n      )}\n      size=\"30\"\n    />\n  );\n\n  return <div className=\"ChampionsList\">{renderTeams(teams)}</div>;\n};\n\nexport default ChampionsList;\n","// @flow\n\nimport '../style.css';\n\nimport { ItemIcon } from '../../../../common';\nimport React from 'react';\n\nconst items1 = ['1001', '1004', '1006'];\nconst items2 = ['1011', '1018', '1026'];\n\nconst ItemsList = () => {\n  const renderItemRow = (items: Array<string>) => (\n    <div className=\"ItemsList-Row\">{items.map(itemId => renderItemIcon(itemId))}</div>\n  );\n\n  const renderItemIcon = (itemId: string) => <ItemIcon itemId={itemId} size=\"25\" />;\n\n  return (\n    <div className=\"ItemsList\">\n      {renderItemRow(items1)}\n      {renderItemRow(items2)}\n    </div>\n  );\n};\n\nexport default ItemsList;\n","// @flow\n\nimport './style.css';\n\nimport { ChampionIcon, SummonerSpellIcon } from '../../../common';\n\nimport ChampionsList from './ChampionsList';\nimport ItemsList from './ItemsList';\nimport React from 'react';\nimport classnames from 'classnames';\n\ntype Props = {\n  isWin?: boolean,\n};\n\nconst Game = ({ isWin = false }: Props) => {\n  return (\n    <div className={classnames('Game', isWin ? 'Game-win' : 'Game-loss')}>\n      <div className=\"Game-ChampionInfo\">\n        <ChampionIcon champion=\"Xayah\" size=\"90\" />\n\n        <div className=\"Game-SummonnerSpells\">\n          <SummonerSpellIcon size=\"30\" spell=\"Flash\" />\n          <SummonerSpellIcon size=\"30\" spell=\"Heal\" />\n        </div>\n      </div>\n\n      <div className=\"Game-Stats\">10/0/2</div>\n\n      <ItemsList />\n\n      <ChampionsList usersChampion=\"Xayah\" />\n    </div>\n  );\n};\n\nexport default Game;\n","// @flow\n\nimport './style.css';\n\nimport { Card } from '../../../common';\nimport Game from '../Game';\nimport React from 'react';\n\nconst GameHistory = () => {\n  return (\n    <Card>\n      <div className=\"GameHistory\">\n        <Game isWin />\n        <Game />\n        <Game />\n        <Game isWin />\n        <Game />\n      </div>\n    </Card>\n  );\n};\n\nexport default GameHistory;\n","// @flow\n\nimport '../style.css';\n\nimport { Button, Card } from '../../../common';\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { showLiveGame } from '../../../actions';\n\ntype Props = {\n  showLiveGame: () => void,\n};\n\nconst OptionsBar = ({ showLiveGame }: Props) => (\n  <Card>\n    <Button label=\"LiveGame\" onClick={showLiveGame} />\n    <Button label=\"Refresh\" />\n  </Card>\n);\n\nconst mapDispatchToProps = dispatch => ({\n  showLiveGame: () => dispatch(showLiveGame()),\n});\n\nexport default connect(null, mapDispatchToProps)(OptionsBar);\n","// @flow\n\nimport './style.css';\n\nimport React from 'react';\n\ntype Props = {\n  id: string,\n  size: string,\n};\n\nconst ProfileIcon = ({ id, size }: Props) => {\n  const profileIcon = `http://ddragon.leagueoflegends.com/cdn/10.6.1/img/profileicon/${id}.png`;\n\n  return <img alt=\"\" className=\"UserProfile-Icon\" height={size} src={profileIcon} width={size} />;\n};\n\nexport default ProfileIcon;\n","// @flow\n\nimport './style.css';\n\nimport {\n  bronze,\n  challenger,\n  diamond,\n  gold,\n  grandmaster,\n  iron,\n  master,\n  platinum,\n  silver,\n} from './rankIcons';\n\nimport type { Rank } from './types';\nimport React from 'react';\n\ntype Props = {\n  size: string,\n  rank: Rank,\n};\n\nconst getRankIcon = (rank: string) => {\n  switch (rank) {\n    case 'challenger':\n      return challenger;\n    case 'grandmaster':\n      return grandmaster;\n    case 'master':\n      return master;\n    case 'diamond':\n      return diamond;\n    case 'platinum':\n      return platinum;\n    case 'gold':\n      return gold;\n    case 'silver':\n      return silver;\n    case 'bronze':\n      return bronze;\n    default:\n      return iron;\n  }\n};\n\nconst RankInfo = ({ size, rank }: Props) => {\n  const rankIcon = getRankIcon(rank);\n\n  return (\n    <div className=\"UserProfile-Rank\">\n      <img alt=\"\" height={size} src={rankIcon} width={size}></img>\n    </div>\n  );\n};\n\nexport default RankInfo;\n","// @flow\n\nimport './style.css';\n\nimport { Card } from '../../common';\nimport GameHistory from './GameHistory';\nimport { LiveGame } from '../../displays';\nimport OptionsBar from './OptionsBar';\nimport ProfileIcon from './ProfileIcon';\nimport RankInfo from './RankInfo';\nimport React from 'react';\nimport { connect } from 'react-redux';\n\ntype Props = {\n  profileIconId: ?string,\n  name: ?string,\n  summonerLevel: ?string,\n  isLiveGameVisible: boolean,\n};\n\nconst UserProfile = ({\n  profileIconId = '4405',\n  name = 'kocham wojtusia',\n  summonerLevel = '250',\n  isLiveGameVisible,\n}: Props) => {\n  return (\n    <div className=\"UserProfile\">\n      <Card>\n        <ProfileIcon id={profileIconId} size=\"80\" />\n\n        <div className=\"UserProfile-Details\">\n          <div className=\"UserProfile-Name\">{name}</div>\n          <div className=\"UserProfile-Level\">{`Level: ${summonerLevel}`}</div>\n        </div>\n\n        <div className=\"UserProfile-Ranks\">\n          <RankInfo rank=\"challenger\" size=\"80\" />\n          <RankInfo size=\"80\" />\n          <RankInfo rank=\"gold\" size=\"80\" />\n        </div>\n      </Card>\n\n      <OptionsBar />\n\n      {isLiveGameVisible && <LiveGame />}\n\n      <GameHistory />\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  isLiveGameVisible: state.isLiveGameVisible,\n});\n\nexport default connect(mapStateToProps)(UserProfile);\n","// @flow\n\nimport { HIDE_LIVE_GAME, SHOW_LIVE_GAME } from '../actions/actionTypes';\n\nconst initialState = {\n  isLiveGameVisible: false,\n};\n\nfunction rootReducer(state = initialState, action) {\n  switch (action.type) {\n    case SHOW_LIVE_GAME:\n      return {\n        ...state,\n        isLiveGameVisible: true,\n      };\n\n    case HIDE_LIVE_GAME:\n      return {\n        ...state,\n        isLiveGameVisible: false,\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default rootReducer;\n","// @flow\n\nimport { applyMiddleware, createStore } from 'redux';\n\nimport { createLogger } from 'redux-logger';\nimport rootReducer from './reducers';\nimport thunk from 'redux-thunk';\n\nconst middleware = [thunk, createLogger()];\n\nconst store = createStore(rootReducer, applyMiddleware(...middleware));\n\nexport default store;\n","// @flow\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { MainScreen, NavBar } from './displays';\n\nimport { Provider } from 'react-redux';\nimport React from 'react';\nimport logo from './logo.svg';\nimport store from './store';\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <NavBar logo={logo} />\n        <MainScreen />\n      </div>\n    </Provider>\n  );\n};\n\nexport default App;\n","// @flow\n\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}